//skylar sabin
//cpt 187
//this class controls the making of the user accounts
//4/28/21
package edu.cpt.sabin.exercise6;

import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import java.util.Scanner;

public class UserAccounts 
{
	private int NOT_FOUND=-1;
	private int RESET_VALUE=0;
	private int MAXIMUM_RECORDS=50;
	private String[] userNames= new String[MAXIMUM_RECORDS];
	private String[] passwords=new String[MAXIMUM_RECORDS];
	private String masterFileName=" ";
	private int recordCount=0;
	private int searchedIndex=0;
	
	UserAccounts(String borrowedFileName)
	{
		masterFileName=borrowedFileName;
	}
	public void setUserAccountArrays()
	{
		//try and catch logic for files
		try
		{
			Scanner infile=new Scanner(new FileInputStream(masterFileName));
			recordCount=RESET_VALUE;
			while(infile.hasNext()==true&&recordCount<MAXIMUM_RECORDS) 
			{
				userNames[recordCount]=infile.next();
				passwords[recordCount]=infile.next();
				recordCount++;
					
			}
			
		infile.close();
		}
		catch(IOException ex)
		{
			recordCount=NOT_FOUND;
		}
	}
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex=getSeqSearch(borrowedUserName);
	}
	public void setSearchedIndex(String borrowedUserName,String borrowedPassword)
	{
		searchedIndex=getSeqSearch(borrowedUserName);
		if(getPasswordMatch(borrowedPassword)==false) 
		{
			searchedIndex=NOT_FOUND;
		}
		else
		{
			searchedIndex=0;
		}
		
		
	}
	public void setWriteOneRecord(String borrowedUserName,String borrowedPassword) 
	{
		try
		{
			PrintWriter filePW= new PrintWriter(new FileWriter(masterFileName));
			filePW.printf("%n%-10s%-15s", borrowedUserName,borrowedPassword);
			filePW.close();
			recordCount++;
		}
		catch(IOException ex)
		{
			recordCount=NOT_FOUND;
		}
	}
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex=0;
		int localValue=0;
		boolean localFound=false;
		
		while(localFound!=true&&localIndex<=recordCount)
		{
			localFound=borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex]);
			localIndex++;
			
		}
		if(localFound==false) 
		{
			localValue=NOT_FOUND;
		}
										
		return localValue;
		
	}
	public boolean getPasswordMatch(String borrowedBorrowedPassowrd)
	{
		int localIndex=0;
		boolean localBool=false;
		if(borrowedBorrowedPassowrd.equals(passwords[localIndex])) 
		{
			localBool=true;
		}
		else if(localIndex<=passwords.length)
		{
			localIndex++;
		}
		else
		{
			localBool=false;
		}
		return localBool;
	}
	public String getFileName()
	{
		return masterFileName;
	}
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	}
	public int getRecordCount()
	{
		return recordCount;
	}
	public int getSearchedIndex()
	{
		return searchedIndex;
	}
}
